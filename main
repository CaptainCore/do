#!/bin/bash

# --------------------------------------
#  Command: captaincore-do
#  Description: A collection of useful command-line utilities for managing WordPress sites.
#  Author: Austin Ginder
#  License: MIT
# --------------------------------------

# --- Global Variables ---
CAPTAINCORE_DO_VERSION="1.0"
GUM_VERSION="0.14.4"
CWEBP_VERSION="1.5.0"
GUM_CMD=""
CWEBP_CMD=""

# --- Helper Functions ---

# --------------------------------------
#  Checks for and installs 'gum' if not present. Sets GUM_CMD on success.
# --------------------------------------
function setup_gum() {
    #  Return if already found
    if [[ -n "$GUM_CMD" ]]; then return 0; fi

    #  If gum is already in the PATH, we're good to go.
    if command -v gum &> /dev/null; then
        GUM_CMD="gum"
        return 0
    fi

    local gum_dir="gum_${GUM_VERSION}_Linux_x86_64"
    local gum_executable="$HOME/private/${gum_dir}/gum"
    
    #  Check for a local installation
    if [ -f "$gum_executable" ] && "$gum_executable" --version &> /dev/null; then
        GUM_CMD="$gum_executable"
        return 0
    fi

    #  If not found or not working, download it
    echo "Required tool 'gum' not found. Installing to ~/private..." >&2
    mkdir -p "$HOME/private"
    cd "$HOME/private" || { echo "Error: Could not enter ~/private." >&2; return 1; }

    local gum_tarball="${gum_dir}.tar.gz"
    if ! wget --quiet "https://github.com/charmbracelet/gum/releases/download/v${GUM_VERSION}/${gum_tarball}" || ! tar -xf "${gum_tarball}"; then
        echo "Error: Failed to download or extract gum." >&2
        cd - > /dev/null
        return 1
    fi
    rm -f "${gum_tarball}"

    #  Final check
    if [ -f "$gum_executable" ] && "$gum_executable" --version &> /dev/null; then
        echo "'gum' installed successfully." >&2
        GUM_CMD="$gum_executable"
    else
        echo "Error: gum installation failed." >&2
        cd - > /dev/null
        return 1
    fi
    cd - > /dev/null
}

# --------------------------------------
#  Checks for and installs 'cwebp' if not present. Sets CWEBP_CMD on success.
# --------------------------------------
function setup_cwebp() {
    #  Return if already found
    if [[ -n "$CWEBP_CMD" ]]; then return 0; fi

    #  If cwebp is already in the PATH, we're good to go.
    if command -v cwebp &> /dev/null; then
        CWEBP_CMD="cwebp"
        return 0
    fi
    
    local cwebp_dir="libwebp-${CWEBP_VERSION}-linux-x86-64"
    local cwebp_executable="$HOME/private/${cwebp_dir}/bin/cwebp"

    #  Check for a local installation
    if [ -f "$cwebp_executable" ] && "$cwebp_executable" -version &> /dev/null; then
        CWEBP_CMD="$cwebp_executable"
        return 0
    fi

    echo "Required tool 'cwebp' not found. Installing to ~/private..." >&2
    mkdir -p "$HOME/private"
    cd "$HOME/private" || { echo "Error: Could not enter ~/private." >&2; return 1; }

    local cwebp_tarball="${cwebp_dir}.tar.gz"
    if ! wget --quiet "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/${cwebp_tarball}" || ! tar -xzf "${cwebp_tarball}"; then
        echo "Error: Failed to download or extract cwebp." >&2
        cd - > /dev/null
        return 1
    fi
    rm -f "${cwebp_tarball}"

    #  Final check
    if [ -f "$cwebp_executable" ] && "$cwebp_executable" -version &> /dev/null; then
        echo "'cwebp' installed successfully." >&2
        CWEBP_CMD="$cwebp_executable"
    else
        echo "Error: cwebp installation failed." >&2
        cd - > /dev/null
        return 1
    fi
    cd - > /dev/null
}

# --------------------------------------
#  Displays detailed help for a specific command.
# --------------------------------------
function show_command_help() {
    local cmd="$1"
    #  If no command is specified, show the general usage.
    if [ -z "$cmd" ]; then
        show_usage
        return
    fi

    #  Display help text based on the command provided.
    case "$cmd" in
        backup)
            echo "Creates a full backup (files + DB) of a WordPress site."
            echo
            echo "Usage: captaincore-do backup <folder>"
            ;;
        backup-db)
            echo "Performs a DB-only backup to a secure private directory."
            echo
            echo "Usage: captaincore-do backup-db"
            ;;
        db-check-autoload)
            echo "Checks the size and top 25 largest autoloaded options in the DB."
            echo
            echo "Usage: captaincore-do db-check-autoload"
            ;;
        db-optimize)
            echo "Converts all MyISAM database tables to the InnoDB engine."
            echo
            echo "Usage: captaincore-do db-optimize"
            ;;
        dump)
            echo "Dumps the content of files matching a pattern into a single text file."
            echo
            echo "Usage: captaincore-do dump \"<pattern>\" [-x <exclude_pattern_1>] [-x <exclude_pattern_2>]..."
            echo
            echo "Arguments:"
            echo "  <pattern>   (Required) The path and file pattern to search for, enclosed in quotes."
            echo
            echo "Flags:"
            echo "  -x <pattern>  (Optional) A file or directory pattern to exclude. Can be used multiple times."
            echo "                To exclude a directory, the pattern MUST end with a forward slash (e.g., 'my-dir/')."
            echo
            echo "Examples:"
            echo "  captaincore-do dump \"wp-content/plugins/my-plugin/**/*.php\""
            echo "  captaincore-do dump \"*\" -x \"*.log\" -x \"node_modules/\""
            ;;
        convert-to-webp)
            echo "Finds and converts large images (JPG, PNG) to WebP format."
            echo
            echo "Usage: captaincore-do convert-to-webp"
            ;;
        migrate)
            echo "Migrates a site from a backup snapshot."
            echo
            echo "Usage: captaincore-do migrate --url=<backup-url> [--update-urls]"
            echo
            echo "  --update-urls   Update urls to destination WordPress site. Default will keep source urls."
            ;;
        monitor)
            echo "Monitors server access logs in real-time."
            echo
            echo "Usage: captaincore-do monitor [--top=<number>] [--now]"
            echo
            echo "Optional Flags:"
            echo "  --top=<number>   The number of top IP/Status combinations to show. Default is 25."
            echo "  --now            Start processing from the end of the log file instead of the beginning."
            ;;
        reset-permissions)
            echo "Resets file and folder permissions to defaults (755 for dirs, 644 for files)."
            echo
            echo "Usage: captaincore-do reset-permissions"
            ;;
        slow-plugins)
            echo "Identifies plugins that may be slowing down WP-CLI."
            echo
            echo "Usage: captaincore-do slow-plugins"
            ;;
        suspend)
            echo "Activates or deactivates a suspend message shown to visitors."
            echo
            echo "Usage: captaincore-do suspend <subcommand> [flags]"
            echo
            echo "Subcommands:"
            echo "  activate      Activates the suspend message. Requires --name and --link flags."
            echo "  deactivate    Deactivates the suspend message."
            echo
            echo "Flags for 'activate':"
            echo "  --name=<business-name>      (Required) The name of the business to display."
            echo "  --link=<business-link>      (Required) The contact link for the business."
            echo "  --wp-content=<path>         (Optional) Path to wp-content directory. Defaults to 'wp-content'."
            echo
            echo "Flags for 'deactivate':"
            echo "  --wp-content=<path>         (Optional) Path to wp-content directory. Defaults to 'wp-content'."
            ;;
        version)
            echo "Displays the current version of the captaincore-do script."
            echo
            echo "Usage: captaincore-do version"
            ;;
        *)
            echo "Error: Unknown command '$cmd' for help." >&2
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# --------------------------------------
#  Displays the main help and usage information.
# --------------------------------------
function show_usage() {
    echo "CaptainCore Do (v$CAPTAINCORE_DO_VERSION)"
    echo "--------------------------"
    echo "A collection of useful command-line utilities."
    echo ""
    echo "Usage:"
    echo "  captaincore-do <command> [arguments] [--flags]"
    echo ""
    echo "Available Commands:"
    echo "  backup              Creates a full backup (files + DB) of a WordPress site."
    echo "  backup-db           Performs a DB-only backup to a secure private directory."
    echo "  convert-to-webp     Finds and converts large images (JPG, PNG) to WebP format."
    echo "  db-check-autoload   Checks the size of autoloaded options in the database."
    echo "  db-optimize         Converts all MyISAM database tables to the InnoDB engine."
    echo "  dump                Dumps the content of files matching a pattern into a single text file."
    echo "  migrate             Migrates a site from a backup URL or local file."
    echo "  monitor             Monitors server access logs in real-time with top IP/status hits."
    echo "  reset-permissions   Resets file and folder permissions to defaults."
    echo "  slow-plugins        Identifies plugins that may be slowing down WP-CLI."
    echo "  suspend             Activates or deactivates a suspend message shown to visitors."
    echo "  version             Displays the current version of the captaincore-do script."
    echo ""
    echo "Run 'captaincore-do help <command>' for more information on a specific command."
}

# --- Main Entry Point and Argument Parser ---

function main() {
    #  If no arguments are provided, show usage and exit.
    if [ $# -eq 0 ]; then
        show_usage
        exit 0
    fi

    # --- Help Flag Handling ---
    #  Detect 'help <command>' pattern
    if [[ "$1" == "help" ]]; then
        show_command_help "$2"
        exit 0
    fi

    #  Detect '<command> --help' pattern
    for arg in "$@"; do
        if [[ "$arg" == "--help" || "$arg" == "-h" ]]; then
            #  The first non-flag argument is the command we need help for.
            local help_for_cmd=""
            for inner_arg in "$@"; do
                #  Find the first argument that doesn't start with a hyphen.
                if [[ ! "$inner_arg" =~ ^- ]]; then
                    help_for_cmd="$inner_arg"
                    break
                fi
            done
            show_command_help "$help_for_cmd"
            exit 0
        fi
    done

    # --- Centralized Argument Parser ---
    #  This loop separates flags from commands.
    local url_flag=""
    local top_flag=""
    local name_flag=""
    local link_flag=""
    local wp_content_flag=""
    local update_urls_flag=""
    local now_flag=""
    local exclude_patterns=() # Array for exclude patterns
    local positional_args=() #  To store commands and their direct arguments
    
    while [[ $# -gt 0 ]]; do
      case $1 in
        --url=*)
          url_flag="${1#*=}"
          shift
          ;;
        --top=*)
          top_flag="${1#*=}"
          shift
          ;;
        --now)
          now_flag=true
          shift
          ;;
        --name=*)
          name_flag="${1#*=}"
          shift
          ;;
        --link=*)
          link_flag="${1#*=}"
          shift
          ;;
        --wp-content=*)
          wp_content_flag="${1#*=}"
          shift
          ;;
        --update-urls)
          update_urls_flag=true
          shift
          ;;
        -x) # Exclude flag
          if [[ -n "$2" ]]; then
            exclude_patterns+=("$2")
            shift 2 # past flag and value
          else
            echo "Error: -x flag requires an argument." >&2
            exit 1
          fi
          ;;
        -*)
          #  This will catch unknown flags like --foo
          echo "Error: Unknown flag: $1" >&2
          show_usage
          exit 1
          ;;
        *)
          #  It's a command or a positional argument
          positional_args+=("$1")
          shift #  past argument
          ;;
      esac
    done

    #  The first positional argument is the main command.
    local command="${positional_args[0]}"

    # --- Command Router ---
    #  This routes to the correct function based on the parsed command.
    case "$command" in
        backup)
            full_backup "${positional_args[1]}"
            ;;
        backup-db)
            db_backup
            ;;
        db-check-autoload)
            db_check_autoload
            ;;
        db-optimize)
            db_optimize
            ;;
        convert-to-webp)
            convert_to_webp
            ;;
        dump)
            # There should be exactly 2 positional args total: 'dump' and the pattern.
            if [ ${#positional_args[@]} -ne 2 ]; then
                echo -e "Error: Incorrect number of arguments for 'dump'. It's likely your pattern was expanded by the shell." >&2
                echo "Please wrap the input pattern in double quotes." >&2
                echo -e "\n  Usage: captaincore-do dump \"<pattern>\" [-x <exclude1>...]" >&2
                return 1
            fi
            run_dump "${positional_args[1]}" "${exclude_patterns[@]}"
            ;;
        migrate)
            if [[ -z "$url_flag" ]]; then
                echo "Error: The 'migrate' command requires the --url=<...> flag." >&2
                show_command_help "migrate"
                exit 1
            fi
            migrate_site "$url_flag" "$update_urls_flag"
            ;;
        monitor)
            monitor_traffic "$top_flag" "$now_flag"
            ;;
        reset-permissions)
            reset_permissions
            ;;
        slow-plugins)
            identify_slow_plugins
            ;;
        suspend)
            local arg1="${positional_args[1]}" 
            case "$arg1" in
                activate)
                    suspend_activate "$name_flag" "$link_flag" "$wp_content_flag"
                    ;;
                deactivate)
                    suspend_deactivate "$wp_content_flag"
                    ;;
                *)
                    show_command_help "suspend"
                    exit 0
                    ;;
            esac
            ;;
        version|--version|-v)
            show_version
            ;;
        *)
            echo "Error: Unknown command '$command'." >&2
            show_usage
            exit 1
            ;;
    esac
}

#  Pass all script arguments to the main function.
main "$@"